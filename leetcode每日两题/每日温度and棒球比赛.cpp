#define _CRT_SECURE_NO_WARNINGS 1

/*
739. 每日温度
根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。

例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。

提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。
*/
//单调栈解法
class Solution {
	stack<int> s;
public:
	vector<int> dailyTemperatures(vector<int>& T)
	{
		vector<int> ret(T.size(), 0);
		for (size_t i = 0; i < T.size(); i++)
		{
			while (!s.empty() && T[s.top()] < T[i])
			{
				ret[s.top()] = i - s.top();
				s.pop();
			}
			s.push(i);
		}
		return ret;
	}
};


/*
682. 棒球比赛
你现在是棒球比赛记录员。
给定一个字符串列表，每个字符串可以是以下四种类型之一：
1.整数（一轮的得分）：直接表示您在本轮中获得的积分数。
2. "+"（一轮的得分）：表示本轮获得的得分是前两轮有效 回合得分的总和。
3. "D"（一轮的得分）：表示本轮获得的得分是前一轮有效 回合得分的两倍。
4. "C"（一个操作，这不是一个回合的分数）：表示您获得的最后一个有效 回合的分数是无效的，应该被移除。

每一轮的操作都是永久性的，可能会对前一轮和后一轮产生影响。
你需要返回你在所有回合中得分的总和。

示例 1:

输入: ["5", "2", "C", "D", "+"]
	输出 : 30
	解释 :
	第1轮：你可以得到5分。总和是：5。
	第2轮：你可以得到2分。总和是：7。
	操作1：第2轮的数据无效。总和是：5。
	第3轮：你可以得到10分（第2轮的数据已被删除）。总数是：15。
	第4轮：你可以得到5 + 10 = 15分。总数是：30。
	示例 2:

输入: ["5", "-2", "4", "C", "D", "9", "+", "+"]
	输出 : 27
	解释 :
	第1轮：你可以得到5分。总和是：5。
	第2轮：你可以得到 - 2分。总数是：3。
	第3轮：你可以得到4分。总和是：7。
	操作1：第3轮的数据无效。总数是：3。
	第4轮：你可以得到 - 4分（第三轮的数据已被删除）。总和是： - 1。
	第5轮：你可以得到9分。总数是：8。
	第6轮：你可以得到 - 4 + 9 = 5分。总数是13。
	第7轮：你可以得到9 + 5 = 14分。总数是27。
*/

class Solution {
	stack<int> s;
public:
	int calPoints(vector<string>& ops)
	{
		int sum = 0;
		for (size_t i = 0; i < ops.size(); i++)
		{
			int tmp = 0;
			if (ops[i] == "C")
			{
				sum -= s.top();
				s.pop();
				continue;
			}
			else if (ops[i] == "D")
				tmp = s.top() * 2;
			else if (ops[i] == "+")
			{
				int top = s.top();
				s.pop();
				tmp += s.top() + top;
				s.push(top);
			}
			else
				tmp = atoi(ops[i].c_str());
			s.push(tmp);
			sum += tmp;
		}
		return sum;
	}
};